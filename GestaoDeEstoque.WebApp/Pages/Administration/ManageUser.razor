@page "/manageuser/{userid}"
@using Microsoft.AspNetCore.Identity;
@using System.Security.Claims;
@using System.ComponentModel.DataAnnotations;
@inject UserManager<IdentityUser> UserManager
@inject NavigationManager NavigationManager


@attribute [Authorize(Policy = "Admin")]


<h3>Gerenciar permissões</h3>
<br />
@if (viewModel != null)
{
    <EditForm Model="viewModel" OnValidSubmit="SaveUser">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

        <div class="form-group">
            <label for="email">Email</label>
            <input id="email" type="text" class="form-control" readonly value="@viewModel.Email" />
        </div>
        <br /> 
        <div class="form-group">
            <label for="dp">Departamento</label>
            <select @bind="@viewModel.Department" class="form-control">
                <option></option>
                <option value="Administrator">Admin</option>
                <option value="InventoryManagement">Inventário</option>
                <option value="Sales">Vendas</option>
                <option value="Purchasing">Compras</option>
                <option value="ProductionManagement">Produção</option>
            </select>
        </div>
        <br />
        <button type="submit" class="btn btn-primary">Salvar</button>
        <button type="button" class="btn btn-primary" @onclick="Cancel">Cancelar</button>
    </EditForm>
}

@code {
    [Parameter]
    public string? UserId { get; set; }

    private IdentityUser? user;
    private Claim? departmentClaim;
    private bool userHadDepartment = true;
    private ManagerUserViewModel? viewModel;

    protected override async Task OnParametersSetAsync()
    {
        base.OnParametersSet();

        user = UserManager.Users.First(x => x.Id == this.UserId);

        var claims = await UserManager.GetClaimsAsync(user);

        departmentClaim = claims.FirstOrDefault(x => x.Type == "Department");

        if(departmentClaim == null)
        {
            userHadDepartment = false;
            departmentClaim = new Claim("Department", string.Empty);
        }

        viewModel = new ManagerUserViewModel
        {
                Email = user.Email,
                Department = departmentClaim.Value
        };
    }

    public class ManagerUserViewModel
    {
        public string? Email { get; set; }

        [Required]
        public string? Department { get; set; }
    }

    private async Task SaveUser()
    {
        if (userHadDepartment)
        {
            await UserManager.ReplaceClaimAsync(user, departmentClaim, new Claim("Department", viewModel.Department));
        }
        else
        {
            await UserManager.AddClaimAsync(user, new Claim("Department", viewModel.Department));
        }

        NavigationManager.NavigateTo("/manageusers");
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/manageusers");
    }

}
