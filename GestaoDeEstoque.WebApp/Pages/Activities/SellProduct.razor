@page "/sell"
@using static GestaoDeEstoque.WebApp.Controls.Common.AutoCompleteComponent;
@inject IViewProductByNameUseCase ViewProductByNameUseCase
@inject IViewProductByIdUseCase ViewProductByIdUseCase
@inject ISellProductUseCase SellProductUseCase
@inject IJSRuntime JSRuntime

@attribute [Authorize(Policy = "Sales")]

<h3>SellProduct</h3>
<br />

<EditForm id="sell-form" Model="sellViewModel" OnValidSubmit="Sell">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>

    <div class="form-group">
        <label for="so">Comprar pedido #</label>
        <InputText id="so" @bind-Value="sellViewModel.SalesOrderNumber" class="form-control"></InputText>
    </div>
    <br />
    <div class="card">
        <div class="card-body">
            <div class="form-group">
                <AutoCompleteComponent Label="Produto para Vender"
                                       SearchFunction="SearchProduct"
                                       OnItemSelected="OnItemSelected">
                </AutoCompleteComponent>

                <input type="hidden" value="@sellViewModel.ProductId" />
                <div class="form-group">
                    <label for="qty">Preço</label>
                    <InputNumber id="qty" @bind-Value="sellViewModel.UnitPrice" class="form-control"></InputNumber>
                </div>

            </div>
        </div>
    </div>
    <br />
    <div class="form-group">
        <label for="qty">Quantidade</label>
        <InputNumber id="qty" @bind-Value="sellViewModel.QuantityToSell" class="form-control"></InputNumber>
    </div>

    <br />
    <button type="submit" class="btn btn-primary">Vender</button>

</EditForm>

@code {
    private AuthenticationState? authenticationState { get; set; } //classe retorna informações do usuário logado
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    private SellViewModel sellViewModel = new();
    private Product? selectedProduct = null;

    protected override async Task OnInitializedAsync()
    {
        if (authenticationStateTask != null)
            authenticationState = await authenticationStateTask;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender)
        {
            JSRuntime.InvokeVoidAsync("PreventFormSubmition", "sell-form");
        }
    }

    private async Task<List<ItemViewModel>?> SearchProduct(string name)
    {
        var list = await ViewProductByNameUseCase.ExecuteAsync(name);
        if (list is null) return null;

        return list.Select(x => new ItemViewModel { Id = x.ProductId, Name = x.ProductName })?.ToList();
    }

    private async Task OnItemSelected(ItemViewModel item)
    {
        this.selectedProduct = await ViewProductByIdUseCase.ExecuteAsync(item.Id);

        sellViewModel.ProductId = item.Id;
        sellViewModel.Product = selectedProduct;
        sellViewModel.UnitPrice = this.selectedProduct.Price;
    }

    private async Task Sell()
    {
        if(this.sellViewModel.Product != null &&
           authenticationState != null &&
           !string.IsNullOrWhiteSpace(authenticationState.User?.Identity?.Name)
           )
                await SellProductUseCase.ExecuteAsync(
                    this.sellViewModel.SalesOrderNumber,
                    this.sellViewModel.Product,
                    this.sellViewModel.QuantityToSell,
                    this.sellViewModel.UnitPrice,
                    authenticationState.User.Identity.Name
        );

        this.sellViewModel = new();
        this.selectedProduct = null;
    }

}
